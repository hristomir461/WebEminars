@model WebEminarViewModel
@using WebEminari.Web.ViewModels.Comments
@using Ganss.XSS;
@{
    this.ViewData["Title"] = Model.Title;
    int averageVote = (int)Model.AverageVote;
    var sanitizer = new HtmlSanitizer();
    sanitizer.AllowedSchemes.Add("data");
    bool isLoggedIn = User.Identity.IsAuthenticated;
    bool userCanBook = isLoggedIn && !Model.UsersBooked.Contains(User.Identity.Name) && Model.MaxPeople > 0;
}
<style>
    span {
        font-size: 20px;
    }
</style>
        <header class="site-header">
            <div class="container">
                <div class="site-header-inner">
                    <div class="brand header-brand">
                        <div class="header-logo-image asset-light" style="display: flex; align-items: center; ">
                            <img width="100" src="/ProfileImages/@Model.AddedByUserImagePath" />
                            <span style="padding: 10px;">@Model.AddedByUserFirstName @Model.AddedByUserLastName</span>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <br /><br />
        <main>
            <div id="app">
                @if (isLoggedIn)
                {
                    <star-rating v-model="rating" :max-stars="5"></star-rating>
                    <span id="averageVoteValue">@Model.AverageVote.ToString("0.0")</span><span> / 5</span>

                    <template id="star-rating-template">
                        <span style="margin-left: 50px">

                            <i style="font-size: 30px;cursor: pointer;" v-for="(n, index) in maxStars"
                               :class="getClass(n)"
                               :style="getStyle(n)"
                               v-on:click="$emit('input', n)"><i style="color: transparent">{{index + 1}}</i></i>

                        </span>
                    </template>
                }

                <div>
                    <b-button style="float: right; margin-top: -40px; margin-right: 50px" id="show-btn" v-on:click="$bvModal.show('bv-modal-example')">Изпратете проблема на имеил</b-button>

                    <b-modal id="bv-modal-example" hide-footer>
                        <template #modal-title>
                            Какъв е проблемът ?
                        </template>
                        <div class="d-block text-center">
                            <form method="post" asp-action="SendToEmail" asp-route-id="@Model.Id">
                                <p>Моля опишете проблема</p>
                                <textarea class="form-control" rows="4" type="text" name="content" value="" required></textarea>
                                <br />
                                <button class="btn btn-danger" v-on:click="$bvModal.hide('bv-modal-example')">Close</button>
                                <button class="btn btn-success">Ok</button>
                            </form>
                        </div>
                    </b-modal>
                </div>
            </div>
            <section class="features section">
                <div class="container">
                    <div class="features-inner section-inner has-bottom-divider">
                        <div class="features-header text-center">
                            <div class="container-sm">
                                <h2 class="section-title mt-0">@Model.Title</h2>
                                <div class="features-image">
                                    @if (Model.ImageName != null)
                                    {
                                        <img class="features-box asset-light" src="~/Images/@Model.ImageName" alt="Card image cap">
                                    }
                                    else
                                    {
                                        <iframe width="853"
                                                height="505"
                                                src="@Model.VideoUrl"
                                                frameborder="0"
                                                allowfullscreen></iframe>
                                    }
                                </div>
                            </div>
                        </div>
                        <p>@Html.Raw(sanitizer.Sanitize(Model.Description))</p>
                    </div>
                    @if (Model.ImageName != null)
                    {
                        <h4>Дата: @Model.DateTime.ToShortDateString()</h4>
                        <h4>Час: @Model.DateTime.ToShortTimeString()</h4>
                    }
                    <h4>Тема: @Model.CategoryName</h4>
                    <form id="likesForm" method="post"></form>
                    <div>
                        <small class="text-muted">Likes - <span id="likesCount">@Model.LikesCount</span></small>
                    </div>
                    <a onclick="toggleLike(@Model.Id)" class="btn btn-sm btn-danger mb-1">
                        <i class="far fa-heart"></i> Like
                    </a>
                    <!-- partial -->
                    <script src='https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.0/TweenMax.min.js'></script>

                    @if (Model.UsersBooked.Contains(User.Identity.Name))
                    {
                        <h4>Meet Link: <a href="@Model.MeetLink">@Model.MeetLink<a></h4>
                    }

                    @if (Model.ImageName != null && Model.DateTime >= DateTime.UtcNow)
                    {
                        <h4>Свободни места: @Model.MaxPeople</h4>
                    }
                    @if (Model.ImageName != null && Model.DateTime <= DateTime.UtcNow)
                    {
                        <h4>Изминал</h4>
                    }
                    @if (Model.ImageName == null)
                    {
                        <h4>Качен</h4>
                    }
                    <a asp-controller="Report" asp-action="WebEminar" asp-route-id="@Model.Id" class="btn btn-sm btn-warning mb-1">
                        <i class="far fa-flag"></i> Report
                    </a>
                    @if (userCanBook)
                    {
                        <form method="post" asp-action="BookForEvent">
                            @if (Model.ImageName != null && Model.DateTime >= DateTime.UtcNow)
                            {
                                <input type="hidden" name="EventId" value="@Model.Id" />

                                <button class="btn btn-primary">Book for Event</button>
                            }
                        </form>
                    }

                </div>
                <br />
                <partial name="_CommentPartial" model="new CommentViewModel { WebEminarId = Model.Id }" />
                @await Component.InvokeAsync("AllComments", new { webEminarId = Model.Id })
                <br />
                <br />
                <br />


                <form method="post" id="antiForgeryForm"></form>
    </section>


    </main>









<form method="post" id="antiForgeryForm"></form>
@section Scripts {
    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-vue/2.21.2/bootstrap-vue.min.js" integrity="sha512-Z0dNfC81uEXC2iTTXtE0rM18I3ATkwn1m8Lxe0onw/uPEEkCmVZd+H8GTeYGkAZv50yvoSR5N3hoy/Do2hNSkw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        Vue.component("star-rating", {
            props: {
                value: { type: Number, default: 0 },
                maxStars: { type: Number, default: 5 },
                starredColor: { type: String, default: "orange" },
                blankColor: { type: String, default: "darkgray" }
            },
            template: "#star-rating-template",
            methods: {
                getClass(n) {
                    return {
                        "fa": true,
                        "fa-star": n <= this.value,
                        "fa-star-o": n > this.value
                    }
                },
                getStyle(n) {
                    return {
                        color: n <= this.value ? this.starredColor : this.blankColor
                    }
                }
            }
        })

        new Vue({
            el: "#app",
            data: {
                rating: @averageVote,
            }
        })
    </script>
    <script>
        const btnLove = document.querySelector('.btn-love');
        btnLove.addEventListener('click', function (e) {
            if (!this.classList.contains('act')) {
                this.className += " act";

                TweenMax.set('.circle,.small-ornament', {
                    rotation: 0,
                    scale: 0,
                })
                TweenMax.set('.ornament', {
                    opacity: 0,
                    scale: 1,
                })
                let Tl = new TimelineMax({});
                Tl.to('.fa', 0.1, {
                    scale: 0,
                    ease: Back.easeNone,
                })

                Tl.to('.circle', 0.2, {

                    scale: 1.2,
                    opacity: 1,
                    ease: Back.easeNone,
                })

                Tl.to('.fa', 0.2, {
                    delay: 0.1,
                    scale: 1.3,
                    color: '#e3274d',
                    ease: Ease.easeOut
                })
                Tl.to('.fa', 0.2, {
                    scale: 1,
                    ease: Ease.easeOut
                })

                Tl = new TimelineMax({
                    delay: 0.1,
                });


                Tl.to('#eclipse', 0.2, {

                    strokeWidth: 10,
                    ease: Back.easeNone,
                })
                Tl.to('#eclipse', 0.2, {
                    strokeWidth: 0,
                    ease: Back.easeNone,
                })
                Tl = new TimelineMax({
                    delay: 0.1,
                });
                Tl.to('.small-ornament', 0.3, {
                    scale: 0.8,
                    opacity: 1,
                    ease: Linear.easeOut,
                })
                Tl.to('.small-ornament', 0.2, {
                    scale: 1.2,
                    opacity: 1,
                    rotation: 15,
                    ease: Ease.easeOut,
                })


                Tl = new TimelineMax({
                    delay: 0.3,
                });
                Tl.to('.ornament', 0.2, {
                    opacity: 1,
                    ease: Ease.easeNone
                })
                Tl.to('.ornament', 0.1, {
                    scale: 0,
                    ease: Ease.easeOut
                })
            } else {
                this.classList.remove('act');
                TweenMax.set('.fa', {
                    color: '#c0c1c3',
                })
            }
        })
    </script>
    <script>
         $("i").each(function (el) {
             $(this).click(function () {
                 var value = $(this.innerHTML).html();
                var webEminarId = @Model.Id;
                var antiForgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();
                var data = { webEminarId: webEminarId, value: value };
                $.ajax({
                    type: "POST",
                    url: "/api/Votes",
                    data: JSON.stringify(data),
                    headers: {
                        'X-CSRF-TOKEN': antiForgeryToken
                    },
                    success: function (data) {
                        $('#averageVoteValue').html(data.averageVote.toFixed(1));
                    },
                    contentType: 'application/json',
                });
            })
        });
    </script>
}
